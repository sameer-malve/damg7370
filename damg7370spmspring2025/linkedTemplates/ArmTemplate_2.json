{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "damg7370spmspring2025"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DF_Clean_Data_From__TSV')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText14",
								"type": "DatasetReference"
							},
							"name": "readTSVfile"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_PET",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "TransposeColumns"
						},
						{
							"name": "PickRequiredColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Job_ID_Param as string (\"10\")",
						"}",
						"source(output(",
						"          License_Issue_Date as string,",
						"          License_Number as string,",
						"          Animals_Name as string,",
						"          Species as string,",
						"          Primary_Breed as string,",
						"          Secondary_Breed as string,",
						"          ZIP_Code as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> readTSVfile",
						"readTSVfile derive(LIC_ISSUE_DATE = toDate(License_Issue_Date,'MMMM dd yyyy'),",
						"          Secondary_Breed = iifNull(Secondary_Breed,'Unknown'),",
						"          ZIP_Code = lpad(toString(ZIP_Code),5,'0'),",
						"          Species = upper(Species),",
						"          LIC_Number = toInteger(translate(License_Number,'S','')),",
						"          Animals_NAME = translate(Animals_Name,'()',''),",
						"          Load_Date = currentDate(),",
						"          {Job_ID } = $Job_ID_Param) ~> TransposeColumns",
						"TransposeColumns select(mapColumn(",
						"          Species,",
						"          Primary_Breed,",
						"          Secondary_Breed,",
						"          ZIP_Code,",
						"          LIC_ISSUE_DATE,",
						"          LIC_Number,",
						"          Animals_Name = TransposeColumns@Animals_NAME,",
						"          Load_Date,",
						"          {Job_ID }",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> PickRequiredColumn",
						"PickRequiredColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LICENSE_ISSUE_DATE as string,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          SPECIES = Species,",
						"          PRIMARY_BREED = Primary_Breed,",
						"          LICENSE_ISSUE_DATE = LIC_ISSUE_DATE,",
						"          LICENSE_NUMBER = LIC_Number,",
						"          ANIMAL_NAME = Animals_Name,",
						"          SECONDARY_BREED = Secondary_Breed,",
						"          ZIP_CODE = ZIP_Code,",
						"          DI_JOB_ID = {Job_ID },",
						"          DI_LOAD_DT = Load_Date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Seattle_pet_license_BreedDim_load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_PET",
								"type": "DatasetReference"
							},
							"name": "sourceStg",
							"description": "Import data from Stage table SEATTLE_PET_TABLE"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable10",
								"type": "DatasetReference"
							},
							"name": "BreedDimMaxId",
							"description": "Import Data from Breed Dim"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Breed",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim",
							"description": "Import Data from BREED_DIM"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Breed",
								"type": "DatasetReference"
							},
							"name": "sinkBreedDim",
							"description": "Export Data to BREED_DIM"
						}
					],
					"transformations": [
						{
							"name": "SourceDataWithSK",
							"description": "Custom Cross join on 'sourceStg' and 'BreedDimMaxId'"
						},
						{
							"name": "aggregateBreedKeys",
							"description": "Aggregate data by 'SPECIES, PRIMARYBREED, SECONDARYBREED, MAXBREEDSK' producing Columns"
						},
						{
							"name": "joinToTarget",
							"description": "Left Outer Join on aggregateBreedKey and SourceBreedDim"
						},
						{
							"name": "filterExistingRows",
							"description": "Filter rows using expression on column 'SPECIES_NAME, PRIMARY_BREED_NAME,SECONDARY_BREED_NAME'"
						},
						{
							"name": "surrogateKey",
							"description": "Adding new key RowNum starting from 1 with step 1"
						},
						{
							"name": "DerivedColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     DI_JOB_ID as string (\"59\")",
						"}",
						"source(output(",
						"          LICENSE_ISSUE_DATE as string,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceStg",
						"source(output(",
						"          MAXBREEDSK as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(BREED_SK),0) as MaxBreedSK FROM SEATTLE_PET_LICENSE_SCHEMA.BREED_DIM',",
						"     format: 'query') ~> BreedDimMaxId",
						"source(output(",
						"          BREED_SK as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          SPECIES_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreedDim",
						"sourceStg, BreedDimMaxId join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> SourceDataWithSK",
						"SourceDataWithSK aggregate(groupBy(SPECIES,",
						"          PRIMARY_BREED,",
						"          SECONDARY_BREED,",
						"          MAXBREEDSK),",
						"     COUNT_ROW = count(LICENSE_NUMBER)) ~> aggregateBreedKeys",
						"aggregateBreedKeys, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME",
						"     && SECONDARY_BREED == SECONDARY_BREED_NAME",
						"     && SPECIES == SPECIES_NAME,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinToTarget",
						"joinToTarget filter(isNull(SPECIES_NAME)&&isNull(PRIMARY_BREED_NAME)&&isNull(SECONDARY_BREED_NAME)) ~> filterExistingRows",
						"filterExistingRows keyGenerate(output(RowNum as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey",
						"surrogateKey derive(BREED_SK = MAXBREEDSK + RowNum,",
						"          DI_LOAD_DT = currentTimestamp(),",
						"          DI_JOB_ID = $DI_JOB_ID) ~> DerivedColumns",
						"DerivedColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          BREED_SK as string,",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          SPECIES_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     stageInsert: true,",
						"     mapColumn(",
						"          BREED_SK,",
						"          PRIMARY_BREED_NAME = PRIMARY_BREED,",
						"          SECONDARY_BREED_NAME = SECONDARY_BREED,",
						"          SPECIES_NAME = SPECIES,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sinkBreedDim"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowLocationDim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText_Geo",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable11",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          state_fips as string,",
						"          state as string,",
						"          state_abbr as string,",
						"          zipcode as string,",
						"          county as string,",
						"          city as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(SK_ID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(DI_LOAD_DT = currentTimestamp(),",
						"          DI_JOB_ID = uuid()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          LOCATION_SK as string,",
						"          ZIP_CODE as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          LOCATION_SK = SK_ID,",
						"          ZIP_CODE = zipcode,",
						"          CITY = city,",
						"          STATE = state,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Fact_Load')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable_PET",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_LOC_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceLocDim"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_Breed",
								"type": "DatasetReference"
							},
							"name": "sourceBreedDim"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_DATE_DIM",
								"type": "DatasetReference"
							},
							"name": "sourceDateDim"
						},
						{
							"dataset": {
								"referenceName": "SnowflakeTable_PET_LIC_FCT",
								"type": "DatasetReference"
							},
							"name": "FactMaxID",
							"description": "Add source dataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SnowflakeTable12",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "joinLocDim"
						},
						{
							"name": "joinBreedDim"
						},
						{
							"name": "joinDateDim"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "joinFCT"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          LICENSE_ISSUE_DATE as date,",
						"          LICENSE_NUMBER as string,",
						"          ANIMAL_NAME as string,",
						"          SPECIES as string,",
						"          PRIMARY_BREED as string,",
						"          SECONDARY_BREED as string,",
						"          ZIP_CODE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> source1",
						"source(output(",
						"          LOCATION_SK as decimal(10,0),",
						"          ZIP_CODE as string,",
						"          CITY as string,",
						"          STATE as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceLocDim",
						"source(output(",
						"          BREED_SK as decimal(10,0),",
						"          PRIMARY_BREED_NAME as string,",
						"          SECONDARY_BREED_NAME as string,",
						"          SPECIES_NAME as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceBreedDim",
						"source(output(",
						"          DT as date,",
						"          ABRV_DAY_NAME as string,",
						"          MONTH_NAME as string,",
						"          START_DAY_OF_MONTH as date,",
						"          END_DAY_OF_MONTH as date,",
						"          QUARTER_NUM as decimal(2,0),",
						"          DAY_OF_WEEK as decimal(2,0),",
						"          IS_WEEKEND as decimal(1,0),",
						"          YEAR_NUM as decimal(4,0),",
						"          MONTH_NUM as decimal(2,0),",
						"          DAY_NUM as decimal(2,0),",
						"          DATE_DIM_SK as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table') ~> sourceDateDim",
						"source(output(",
						"          MAX_LIC as decimal(10,0)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     query: 'SELECT NVL(MAX(PET_LIC_SK),0) AS MAX_LIC FROM SEATTLE_PET_LICENSE_SCHEMA.PET_LIC_FCT',",
						"     format: 'query') ~> FactMaxID",
						"source1, sourceLocDim join(source1@ZIP_CODE == sourceLocDim@ZIP_CODE,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinLocDim",
						"joinLocDim, sourceBreedDim join(PRIMARY_BREED == PRIMARY_BREED_NAME,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinBreedDim",
						"joinBreedDim, sourceDateDim join(LICENSE_ISSUE_DATE == DT,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDateDim",
						"select1 keyGenerate(output(ROW_NUM as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"joinDateDim, FactMaxID join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinFCT",
						"joinFCT select(mapColumn(",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          PET_LIC_SK = MAX_LIC,",
						"          DATE_DIM_SK,",
						"          DI_JOB_ID = sourceLocDim@DI_JOB_ID,",
						"          DI_LOAD_DT = sourceLocDim@DI_LOAD_DT",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"surrogateKey1 derive(PET_LIC_SK = PET_LIC_SK + ROW_NUM) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PET_LIC_SK as string,",
						"          DATE_DIM_SK as string,",
						"          LOCATION_SK as string,",
						"          BREED_SK as string,",
						"          DI_JOB_ID as string,",
						"          DI_LOAD_DT as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     truncate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     stageInsert: true,",
						"     mapColumn(",
						"          PET_LIC_SK,",
						"          DATE_DIM_SK,",
						"          LOCATION_SK,",
						"          BREED_SK,",
						"          DI_JOB_ID,",
						"          DI_LOAD_DT",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CleanPetLicData",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Clean_Data_From__TSV",
								"type": "DataFlowReference",
								"parameters": {
									"Job_ID_Param": "\"10\""
								},
								"datasetParameters": {
									"readTSVfile": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					},
					{
						"name": "LoadBreedDim",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "CleanPetLicData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Seattle_pet_license_BreedDim_load",
								"type": "DataFlowReference",
								"parameters": {
									"DI_JOB_ID": "\"59\""
								},
								"datasetParameters": {
									"sourceStg": {},
									"BreedDimMaxId": {},
									"sourceBreedDim": {},
									"sinkBreedDim": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LoadLocationDim",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "LoadBreedDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowLocationDim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "LoadFact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "LoadLocationDim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Fact_Load",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sourceLocDim": {},
									"sourceBreedDim": {},
									"sourceDateDim": {},
									"FactMaxID": {},
									"sink1": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Directory": {
						"type": "string"
					},
					"File_Name": {
						"type": "string"
					},
					"Delimeter": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Clean_Data_From__TSV')]",
				"[concat(variables('factoryId'), '/dataflows/Seattle_pet_license_BreedDim_load')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowLocationDim')]",
				"[concat(variables('factoryId'), '/dataflows/df_Fact_Load')]"
			]
		}
	]
}