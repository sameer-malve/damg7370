{
	"name": "DF_Clean_Data_From_TSV",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText012",
						"type": "DatasetReference"
					},
					"name": "readTSVfile",
					"description": "Add source dataset"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SnowflakeTable7",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          License_Issue_Date as string,",
				"          License_Number as string,",
				"          Animals_Name as string,",
				"          Species as string,",
				"          Primary_Breed as string,",
				"          Secondary_Breed as string,",
				"          ZIP_Code as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> readTSVfile",
				"readTSVfile derive(LIC_ISSUE_DATE = toDate(License_Issue_Date, 'MMMM dd yyyy'),",
				"          Secondary_Breed = iifNull(Secondary_Breed, 'Unknown'),",
				"          ZIP_Code = lpad(toString(ZIP_Code),5,'0'),",
				"          Species = upper(Species),",
				"          License_Number = toInteger(translate(License_Number,'S','')),",
				"          Animals_Name = translate(Animals_Name,'()[]',''),",
				"          Load_Date = currentDate(),",
				"          job_load_Date = currentDate()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          License_Issue_Date,",
				"          License_Number,",
				"          Animals_Name,",
				"          Species,",
				"          Primary_Breed,",
				"          Secondary_Breed,",
				"          ZIP_Code,",
				"          LIC_ISSUE_DATE,",
				"          Load_Date,",
				"          job_load_Date",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     stageInsert: true) ~> sink1"
			]
		}
	}
}